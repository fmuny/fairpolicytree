dft[[s]][, 1] <- TRUE
}
# Create list to save transformations
trans <- list()
# Loop over splits of original tree and adjust new trees
for (row in seq_len(nrow(ta))){
if (ta[row, 1] > 0){
# Define splitting variable and threshold
splitvar <- tree[["columns"]][ta[row, 1]]
splitvar_org <- sub("_[^_]*$", "", splitvar)
splitvalue_fair <- ta[row, 2]
left_child <- ta[row, 3]
right_child <- ta[row, 4]
# APPROXIMATION
trans[[row]] <- cq_adjustment(
eval=splitvalue_fair,
var=vars[splitvar_org],
var_cdf=vars_cdf[splitvar],
sens=sens)
rownames(trans[[row]]) <- apply(
trans[[row]][colnames(sens)], 1, paste, collapse = "_")
# Update dft
trans[[row]]$share_left <- NA
for (s in idx_sens){
splitvalue_org <- trans[[row]][s, splitvar_org]
# Get ids of current leaf and vars of splitting variable
ids_current_leaf <- which(dft[[s]][, row])
vars_sens <- vars[sens_comb==s,,drop=FALSE]
row.names(vars_sens) <- NULL
vars_current_leaf <- vars_sens[ids_current_leaf, splitvar_org]
vars_cdf_sens <- vars_cdf[sens_comb==s,,drop=FALSE]
row.names(vars_cdf_sens) <- NULL
vars_cdf_current_leaf <- vars_cdf_sens[ids_current_leaf, splitvar]
# Find ties
dec <- ifelse(vars_current_leaf < splitvalue_org, -1, ifelse(vars_current_leaf == splitvalue_org, 0, 1))
# Check share below fair threshold among ties
share_left <- mean(vars_cdf_current_leaf[dec == 0] <= splitvalue_fair)
# assign -1 and 1 accordingly to keep same result
dec[dec == 0] <- (vars_cdf_current_leaf[dec == 0] > splitvalue_fair)*2-1
# Determine ids of left and right child
go_left <- ids_current_leaf[which(dec <= 0)]
go_right <- ids_current_leaf[which(dec > 0)]
#Alternative
# go_left <- ids_current_leaf[which(vars_cdf_current_leaf <= splitvalue_fair)]
go_right <- ids_current_leaf[which(vars_cdf_current_leaf > splitvalue_fair)]
# Update dft
dft[[s]][go_left, left_child] <- TRUE
dft[[s]][go_right, right_child] <- TRUE
# In the tree object we need to update 'nodes', '_tree_array 'and 'columns'
tree_trans[[s]][['nodes']][[row]]$split_value <- splitvalue_org
tree_trans[[s]][["_tree_array"]][row, 2] <- splitvalue_org
tree_trans[[s]][["_tree_array"]][row, 5] <- ifelse(is.na(share_left), 1, share_left)
# Save share_left
trans[[row]][s, 'share_left'] <- ifelse(is.na(share_left), 1, share_left)
# Update prob indicator
if(!is.na(share_left)){
tree_trans[[s]][["probabilistic_splits"]] <- TRUE
}
}
}
}
# Check if prediction before and after transformation equal
nodes_fair <- predict(tree, vars_cdf, type="node.id")
final <- which(ta[, 1] < 0)
nodes_trans <- nodes_fair*0
for (s in idx_sens){
nodes_trans[sens_comb==s] <- as.integer(colnames(dft[[s]][final])[max.col(dft[[s]][final])])
}
if(all.equal(nodes_trans, nodes_fair) != TRUE){
warning("Warning: Transformation failed. Nodes in transformed tree don't exactly match fair tree.")
}
if(!return_nodes){
return(tree_trans)
}else{
return(nodes_trans)
}
}
data<-simulate_fairness_data()
A <- data$decision
scores <- data$scores
sens <- data$sens
As_cdf <- mq_adjustment(vars = A, sens = sens, seed = seed, ties.method = ties.method)$vars_cdf
seed = 123456
ties.method = "random"
As_cdf <- mq_adjustment(vars = A, sens = sens, seed = seed, ties.method = ties.method)$vars_cdf
As_cdf
mq_adjustment(vars = scores, sens = sens, seed = seed, ties.method = ties.method)$vars_mq
scores
prob_split_tree <- function(
A,
scores,
sens,
adjust_scores=FALSE,
seed = 123456,
ties.method = "random",
depth=2,
search.depth = depth,
split.step=1,
min.node.size=1,
verbose=TRUE){
As_cdf <- mq_adjustment(
vars = A, sens = sens, seed = seed, ties.method = ties.method)$vars_cdf
# TODO add check that adjust_scores is bool
if(adjust_scores==TRUE){
scores <- mq_adjustment(
vars = scores, sens = sens, seed = seed, ties.method = ties.method)$vars_mq
}
opt_tree <- 1
}
if(depth == search.depth){
tree_FUN <- function(
A, scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose = verbose){
policytree::policy_tree(
X=A, Gamma=scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
A, scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose){
hybrid_policy_tree(
X = A, Gamma = scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose)
}
}
depth=2
search.depth = depth
split.step=1
min.node.size=1
verbose=TRUE
# Determine tree type
if(depth == search.depth){
tree_FUN <- function(
A, scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose = verbose){
policytree::policy_tree(
X=A, Gamma=scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
A, scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose){
hybrid_policy_tree(
X = A, Gamma = scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose)
}
}
As_cdf <- mq_adjustment(
vars = A, sens = sens, seed = seed, ties.method = ties.method)$vars_cdf
# TODO add check that adjust_scores is bool
if(adjust_scores!=TRUE){
scores_use <- scores
}else{
scores_use <- mq_adjustment(
vars = scores, sens = sens, seed = seed, ties.method = ties.method)$vars_mq
}
adjust_scores=FALSE
As_cdf <- mq_adjustment(
vars = A, sens = sens, seed = seed, ties.method = ties.method)$vars_cdf
# TODO add check that adjust_scores is bool
if(adjust_scores!=TRUE){
scores_use <- scores
}else{
scores_use <- mq_adjustment(
vars = scores, sens = sens, seed = seed, ties.method = ties.method)$vars_mq
}
# Determine tree type
if(depth == search.depth){
tree_FUN <- function(
A, scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose = verbose){
policytree::policy_tree(
X=A, Gamma=scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
A, scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose){
hybrid_policy_tree(
X = A, Gamma = scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose)
}
}
opt_tree <- tree_FUN(As_cdf, scores_use)
policytree::policy_tree
As_cdf <- mq_adjustment(
vars = A, sens = sens, seed = seed, ties.method = ties.method)$vars_cdf
# TODO add check that adjust_scores is bool
if(adjust_scores!=TRUE){
scores_use <- scores
}else{
scores_use <- mq_adjustment(
vars = scores, sens = sens, seed = seed, ties.method = ties.method)$vars_mq
}
# Determine tree type
if(depth == search.depth){
tree_FUN <- function(
A, scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose = verbose){
policytree::policy_tree(
X=A, Gamma=scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
A, scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose){
hybrid_policy_tree(
X = A, Gamma = scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose)
}
}
tree_FUN(As_cdf, scores_use)
tree_FUN(A=As_cdf, scores=scores_use)
# Determine tree type
if(depth == search.depth){
tree_FUN <- function(
A, scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose = verbose){
policy_tree(
X=A, Gamma=scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
A, scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose){
hybrid_policy_tree(
X = A, Gamma = scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose)
}
}
tree_FUN(A=As_cdf, scores=scores_use)
# Determine tree type
if(depth == search.depth){
tree_FUN <- function(
A, scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose = verbose){
policytree::policy_tree(
X=A, Gamma=scores, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
A, scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose){
policytree::hybrid_policy_tree(
X = A, Gamma = scores, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose)
}
}
tree_FUN(A=As_cdf, scores=scores_use)
# Determine tree type
if(depth == search.depth){
tree_FUN <- function(
X, Gamma, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose = verbose){
policytree::policy_tree(
X, Gamma, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
X, Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose){
policytree::hybrid_policy_tree(
X, Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose)
}
}
tree_FUN(X=As_cdf, Gamma=scores_use)
tree_FUN
# Determine tree type
if(depth == search.depth){
tree_FUN <- function(
X, Gamma, depth = depth, split.step,
min.node.size, verbose){
policytree::policy_tree(
X, Gamma, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
X, Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose){
policytree::hybrid_policy_tree(
X, Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose)
}
}
opt_tree <- tree_FUN(X=As_cdf, Gamma=scores_use)
# Determine tree type
if(depth == search.depth){
tree_FUN <- function(
X, Gamma, depth = depth, split.step, min.node.size, verbose){
policytree::policy_tree(
X=X, Gamma=Gamma, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
X, Gamma, depth, search.depth, split.step, min.node.size, verbose){
policytree::hybrid_policy_tree(
X=X, Gamma=Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose)
}
}
As_cdf
scores_use
tree_FUN(X=As_cdf, Gamma=scores_use)
# Determine tree type
if(depth == search.depth){
tree_FUN <- function(
X, Gamma, depth = depth, split.step, min.node.size, verbose){
policytree::policy_tree(
X, Gamma, depth, split.step,
min.node.size, verbose)
}
}else{
tree_FUN <- function(
X, Gamma, depth, search.depth, split.step, min.node.size, verbose){
policytree::hybrid_policy_tree(
X=X, Gamma=Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose = verbose)
}
}
tree_FUN(X=As_cdf, Gamma=scores_use)
PT_DEPTH = 2
PT_SEARCH_DEPTH = 2
splitstep = 1
minnodesize=1
if(PT_DEPTH == PT_SEARCH_DEPTH){
tree_FUN <- function(
X, Gamma, depth = PT_DEPTH, split.step = splitstep,
min.node.size = minnodesize, verbose = TRUE){
policy_tree(
X, Gamma, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
X, Gamma, depth = PT_DEPTH, search.depth = PT_SEARCH_DEPTH,
split.step = splitstep, min.node.size = minnodesize, verbose = TRUE){
hybrid_policy_tree(
X, Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose=verbose)
}
}
tree_FUN(X=As_cdf, Gamma=scores_use)
if(PT_DEPTH == PT_SEARCH_DEPTH){
tree_FUN <- function(
X, Gamma, depth = PT_DEPTH, split.step = splitstep,
min.node.size = minnodesize, verbose = TRUE){
policytree::policy_tree(
X, Gamma, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
X, Gamma, depth = PT_DEPTH, search.depth = PT_SEARCH_DEPTH,
split.step = splitstep, min.node.size = minnodesize, verbose = TRUE){
hybrid_policy_tree(
X, Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose=verbose)
}
}
tree_FUN(X=As_cdf, Gamma=scores_use)
if(PT_DEPTH == PT_SEARCH_DEPTH){
tree_FUN <- function(
X, Gamma, depth = depth, split.step = splitstep,
min.node.size = minnodesize, verbose = TRUE){
policytree::policy_tree(
X, Gamma, depth = depth, split.step = split.step,
min.node.size = min.node.size, verbose=verbose)
}
}else{
tree_FUN <- function(
X, Gamma, depth = PT_DEPTH, search.depth = PT_SEARCH_DEPTH,
split.step = splitstep, min.node.size = minnodesize, verbose = TRUE){
policytree::hybrid_policy_tree(
X, Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose=verbose)
}
}
opt_tree <- tree_FUN(X=As_cdf, Gamma=scores_use)
if(PT_DEPTH == PT_SEARCH_DEPTH){
tree_FUN <- function(
X, Gamma, pt_depth = depth, splitstep = split.step,
minnodesize = min.node.size, pt_verbose = verbose){
policytree::policy_tree(
X, Gamma, depth = pt_depth, split.step = splitstep,
min.node.size = minnodesize, verbose=pt_verbose)
}
}else{
tree_FUN <- function(
X, Gamma, depth = PT_DEPTH, search.depth = PT_SEARCH_DEPTH,
split.step = splitstep, min.node.size = minnodesize, verbose = TRUE){
policytree::hybrid_policy_tree(
X, Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose=verbose)
}
}
tree_FUN(X=As_cdf, Gamma=scores_use)
if(depth == search.depth){
tree_FUN <- function(
A, scores, pt_depth = depth, splitstep = split.step,
minnodesize = min.node.size, pt_verbose = verbose){
policytree::policy_tree(
X=A, Gamma=scores, depth = pt_depth, split.step = splitstep,
min.node.size = minnodesize, verbose=pt_verbose)
}
}else{
tree_FUN <- function(
X, Gamma, depth = PT_DEPTH, search.depth = PT_SEARCH_DEPTH,
split.step = splitstep, min.node.size = minnodesize, verbose = TRUE){
policytree::hybrid_policy_tree(
X, Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose=verbose)
}
}
opt_tree <- tree_FUN(X=As_cdf, Gamma=scores_use)
if(depth == search.depth){
tree_FUN <- function(
A, scores, pt_depth = depth, splitstep = split.step,
minnodesize = min.node.size, pt_verbose = verbose){
policytree::policy_tree(
X=A, Gamma=scores, depth = pt_depth, split.step = splitstep,
min.node.size = minnodesize, verbose=pt_verbose)
}
}else{
tree_FUN <- function(
X, Gamma, depth = PT_DEPTH, search.depth = PT_SEARCH_DEPTH,
split.step = splitstep, min.node.size = minnodesize, verbose = TRUE){
policytree::hybrid_policy_tree(
X, Gamma, depth = depth, search.depth = search.depth,
split.step = split.step, min.node.size = min.node.size, verbose=verbose)
}
}
opt_tree <- tree_FUN(A=As_cdf, scores=scores_use)
if(depth == search.depth){
tree_FUN <- function(
A, scores, pt_depth = depth, splitstep = split.step,
minnodesize = min.node.size, pt_verbose = verbose){
policytree::policy_tree(
X=A, Gamma=scores, depth = pt_depth, split.step = splitstep,
min.node.size = minnodesize, verbose=pt_verbose)
}
}else{
tree_FUN <- function(
A, scores, pt_depth = depth, pt_search_depth = search.depth,
splitstep = split.step, minnodesize = min.node.size, pt_verbose = verbose){
policytree::hybrid_policy_tree(
X=A, Gamma=scores, depth = pt_depth, search.depth = pt_search_depth,
split.step = splitstep, minnodesize = min.node.size, verbose=pt_verbose)
}
}
tree_FUN(A=As_cdf, scores=scores_use)
opt_tree_trans <- transform_tree(tree=opt_tree, sens=sens, vars=A, vars_cdf=As_cdf)
opt_tree_trans
devtools::document()
devtools::document()
devtools::check()
devtools::install()
devtools::build_manual()
devtools::install()
plot.prob_split_tree_list <- function(
tree_list, sens_names=NULL){
if (!inherits(tree_list, "prob_split_tree_list")) {
stop("`tree_list` must be of class 'prob_split_tree_list'.")
}
it <- 0
plots <- list()
long = ""
for(sens_unique in names(tree_list)){
it<-it+1
sens_values <- as.numeric(unlist(strsplit(sens_unique, "_")))
if (!is.null(sens_names)) {
if (!is.character(sens_names)) {
stop("`sens_names` must be a character vector.")
}
if (length(sens_names) != length(sens_values)) {
stop("`sens_names` must have the same length as the number of sensitive attributes (",
length(sens_values), ") in key: ", sens_unique)
}
sens_string <- paste(paste0(sens_names, ": ", sens_values), collapse = ", ")
} else {
sens_string <- sens_unique
}
plots[[sens_unique]] <- plot(tree_list[[sens_unique]])[["x"]][["diagram"]]
plots[[sens_unique]] <- gsub("\\n(\\d+)", paste0("\n",as.character(it),"0\\1"), plots[[sens_unique]])
plots[[sens_unique]] <- gsub("-> (\\d+)", paste0("-> ",as.character(it),"0\\1"), plots[[sens_unique]])
plots[[sens_unique]] <- sub("digraph nodes { \n node [shape=box] ;\n", "", plots[[sens_unique]], fixed=TRUE)
plots[[sens_unique]] <- sub("\n}", "", plots[[sens_unique]])
plots[[sens_unique]] <- paste0(
it, ' [color=none,style=filled, fillcolor=lightblue, label="', sens_string,
'"];\n',it,' -> ',it,'00[style=invis];\n',plots[[sens_unique]])
long <- paste0(long, plots[[sens_unique]])
}
DiagrammeR::grViz(paste0("digraph nodes { \n node [shape=box] ;\n", long, "\n}"))
}
devtools::document()
devtools::install()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::install()
devtools::build_manual()
