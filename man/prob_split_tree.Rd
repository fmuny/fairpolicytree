% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{prob_split_tree}
\alias{prob_split_tree}
\title{Fit a Fair Probabilistic Split Tree}
\usage{
prob_split_tree(
  A,
  scores,
  sens,
  adjust_scores = FALSE,
  seed = 123456,
  ties.method = "random",
  depth = 2,
  search.depth = depth,
  split.step = 1,
  min.node.size = 1,
  verbose = TRUE
)
}
\arguments{
\item{A}{A matrix or data.frame of decision variables.}

\item{scores}{A data.frame or matrix of policy score variables (one column per treatment option).}

\item{sens}{A data.frame or matrix of sensitive attributes used for fairness adjustment.}

\item{adjust_scores}{Logical. Whether to apply fairness adjustment to `scores` as well. Default is `FALSE`.}

\item{seed}{Integer seed for reproducibility. Default is 123456.}

\item{ties.method}{Character string for ranking ties. One of "random", "average", "first", "last", "max", "min".}

\item{depth}{Integer. Maximum depth of the output policy tree. Passed to `policytree::policy_tree`.}

\item{search.depth}{Integer. Only used if greater than `depth`. If so, hybrid tree search is applied
using `policytree::hybrid_policy_tree`. Default is equal to `depth`.}

\item{split.step}{An optional approximation parameter, the number of possible splits to consider
when performing tree search. split.step = 1 (default) considers every possible
split, `split.step = 10` considers splitting at every 10'th sample and may yield
a substantial speedup for dense features. Manually rounding or re-encoding
continuous covariates with very high cardinality in a problem specific manner
allows for finer-grained control of the accuracy/runtime tradeoff and may in
some cases be the preferred approach..}

\item{min.node.size}{An integer indicating the smallest terminal node size permitted. Default is 1.}

\item{verbose}{Logical. Give verbose output. Default is `TRUE`.}
}
\value{
A list of probabilistic split trees, one per sensitive group.
}
\description{
This function performs a cdf-fairness adjustment on decision variables,
and optionally on policy score variables. It then fits a policy tree using the
`policytree` package, and adjusts split thresholds for each sensitive group
to produce probabilistic split trees.
}
